---
import { HydrationDirectiveProps } from "astro/dist/runtime/server/hydration";
import { marked } from "marked";

export interface Props {
  title: string;
  body: string;
  tColour: string;
  date: string;
}

const { title, body, tColour, date } = Astro.props;
const parsedContent = marked.parse(body);

const dateObj = new Date(date);
const day = dateObj.getDate();
const month = dateObj.toLocaleString("default", { month: "long" });
const year = dateObj.getFullYear();

const nthNumber = (number) => {
  if (number > 3 && number < 21) return "th";
  switch (number % 10) {
    case 1:
      return "st";
    case 2:
      return "nd";
    case 3:
      return "rd";
    default:
      return "th";
  }
};

const formattedDate = `${month} ${day}${nthNumber(day)}, ${year}`;
---

<div class="card flex h-full w-full flex-col">
  <div
    class="bg-var bg-blue-500 flex-shrink border-b-2 py-4 px-4 leading-5 md:px-8"
  >
    <h3 class="mb-2 text-xl font-bold">
      {title}
    </h3>
    <p class="text-base font-light">Posted <b>{formattedDate}</b></p>
  </div>
  <div
    class="bg-white flex flex-grow flex-col items-start gap-3 px-4 pb-3 md:px-8"
  >
    <div class="text-left text-lg" set:html={parsedContent} />
  </div>
</div>

<style define:vars={{ tColour }}>
  .bg-var {
    background: var(--tColour);
  }
  .bg-white {
    background: #ffffff;
  }
  .card {
    border: 3px solid black;
    box-shadow: 6px 6px 0px 0px;
    /* transition: ease 0.2s; */
  }

  .card:hover .title {
    background-image: linear-gradient(
      rgba(210, 210, 210, 0.1),
      rgba(210, 210, 210, 20%)
    );
    transition: ease 0.2s;
  }
  .link-button {
    background: #ffffff;
    border: 2px solid black;
    box-shadow: 4px 4px 0px 0px;
  }
  .link-button:hover {
    transform: translate(2px, 2px);
    box-shadow: 2px 2px 0px 0px;
  }
</style>
